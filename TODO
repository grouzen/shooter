# -*- mode: Org; -*-
# If you are not using emacs you are a dick ;^).

* General concept
  Simple text-based(or no?) multiplayer shooter.
  Client-server mechanism based on a binary protocol.

** todo for all
*** TODO Try to figure out what should be a battle mechanism.
*** DONE Makefile: passing parameters for each part(server, client)
    For a while should be used "make CFLAGS=-D[_SERVER_|_CLIENT_] [server|client]".
  
* Closer details
** Server

   How it works:
   Server side has a three threads: 
   1. receives messages from the clients and puts it into messages queue;
   2. handles each message from the messages queue, updates the world's state
      and sends difference to each client. Also, for each client it checks `seq` 
      number from the `struct msg` and if `seq` differs very hard with the
      server's `seq`, thread sends whole world's state to that client.
   3. this thread sends query to each client for getting its `seq` number
      and checking connection state(keep alive) and if `seq` of the client
      is much different, thread sends whole world's state to that client.
   

   players list -+-> player 1 -> recieves data and inserts it into messages queue
   (slots)       +-> player 2 <-.                    |
                 +-> ...        |                    |
                 '-> player n   |                    |
                                |            ________V_______
   world -> queue manager <---------------- ( messages queue )
            Fetchs messages then updates     ----------------
            the world and sends them to the players.


   queue_mngr_func() not always sends diffs to all players.
   Player see only its viewport's zone around it, so it should not know about
   events which happen outside of its visibility range, or for example
   connection event which concerns only one player who sends it.
   
   Only client fills `msg.header.id` and `msg.header.seq` fields,
   server verify it and if necessary sends diff.

   _VERY FUCKING IMPORTANT!_
   In fact on each frame server sends to the clients information 
   about objects which are in a player's viewport only. All world's 
   state is never sent to the clients!

*** todo for the server side.
**** TODO Write function sync_mngr_func()
**** Write a handling of the events within queue_mngr_func()
***** DONE For begin let's handle connection event.
****** DONE Make handshaking with client.
***** Disconnect event from client and server
****** DONE Client
****** DONE Server
**** TODO add uint8_t key[KEY_LEN] to `struct player`
     It's necessary for security reason.
     For example a client wants to disconnect from the server, it sends
     message with its id and server like the fucking stupid moron disconnects
     other client, because the first client just changed value of id field
     in the message's header. Oops!
**** TODO Think about synchronization between the server and a clients more detail.
     see item about sync_mngr_func() too.

** Client

   Client (client.c) should implement some CLI parameters parsing so we can set
   nickname and servername and port.

   First thread draws the user interface and sends a data to the server.
   Second recieves a data and sends the signal to the first.

   How it works:
   Let's suggest that FPS = 5, UI reads user's input 5 times
   per second and each time it sends the data with events to the
   server. When another thread recieves the data it blocks the 
   world's state, updates them, and then UI can be updated.
   That's all ;^).


       Client in mostly works like a server.
     ,---------------------------------------
     |
     +- msgqueue_mngr_thread: works like in a server part.
     |
     +- ui_mngr_thread: init ui and start thread ui_event_mngr_func.
     |
     +- ui_event_mngr_thread: on each frame read UI's event and send it to the server.
     |
     '- recv_mngr_thread: receives messages from server and adds them to msgqueue.
                          Also it must watch on each message type from batch and if
                          necessary handles some of them and than sends result to the server.
     

*** UI
    
    It must be like:
    
    +-------------------------------------+
    | Status line                         |
    |-------------------------------------|
    | ................................... |
    | ................................... |
    | ................................... |
    | ................................... |
    | ...........Scrolled Map............ |
    | ................................... |
    | ...........Here must be............ |
    | ........a various objects.......... |
    | ................................... |
    | ................................... |
    | ................................... |
    | ................................... |
    |-------------------------------------|
    | Notify line                         |
    +-------------------------------------+

    Status line should look like that:

    Nick   W: Rocket(90/40)   HP: 100/100


    When Tab is pressed, statistics about players should be requested from the
    server and displayed in a way like that:

     Nick                    | Kill | Death
    -------------------------+------+-------
     Player                     1       3
     Gamer                      8       2
     Loser                      0      11
    ----------------------------------------

    History of notify line becomes visible when statistics is requested.

*** Just a fucking todo for the client part
**** DONE Write basic UI in ncurses
     Must be an opportunity to write UI in various toolkits(SDL, OGL, and etc).
**** TODO Think about events(actions) that client can makes
     For example: to shoot, to run, to die, to take up an objects and so on.
     Write general functions and data structures for 
     the binary protocol(cdata.c, cdata.h).

